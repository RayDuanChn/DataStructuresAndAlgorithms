package com.leiduanchn.recursion;

/**
 * 递归
 * @author leiduanchn
 * @create 2019-12-14 10:48 p.m.
 */

/*
    算法中有两个最难理解的知识点，一个是动态规划，另一个就是递归。

    递归需要满足的三个条件：
        1. 一个问题的解可以分解为几个子问题的解
        2. 这个问题与分解之后的子问题，除了数据规模不同，求解思路完全一样
        3. 存在递归终止条件

    如何编写递归代码？
        写出递推公式，找到终止条件，然后再翻译成递归代码。
        写递归代码的关键就是找到如何将大问题分解为小问题的规律，并且基于此写出递推公式，然后再推敲终止条件，最后将递推公式和终止条件翻译成代码。
        编写递归代码的关键是，只要遇到递归，我们就把它抽象成一个递推公式，不用想一层层的调用关系，不要试图用人脑去分解递归的每个步骤。

    当我们看到递归时，我们总想把递归平铺展开，脑子里就会循环，一层一层往下调，然后再一层一层返回，试图想搞清楚计算机每一步都是怎么执行的，这样就很容易被绕进去。
    对于递归代码，这种试图想清楚整个递和归过程的做法，实际上是进入了一个思维误区。那正确的思维方式应该是怎样的呢？
    如果一个问题 A 可以分解为若干子问题 B、C、D，你可以假设子问题 B、C、D 已经解决，在此基础上思考如何解决问题 A。而且，你只需要思考问题 A 与子问题 B、C、D 两层之间的关系即可，
    不需要一层一层往下思考子问题与子子问题，子子问题与子子子问题之间的关系。屏蔽掉递归细节，这样子理解起来就简单多了。


    递归代码也有很多弊端。
        比如，
        堆栈溢出: 通过在代码中限制递归调用的最大深度的方式来解决这个问题。递归调用超过一定深度（比如 1000）之后，我们就不继续往下再递归了，直接返回报错。
        重复计算: 通过一个数据结构（比如散列表）来保存已经求解过的 f(k)。当递归调用到 f(k) 时，先看下是否已经求解过了。如果是，则直接从散列表中取值返回，不需要重复计算
        函数调用耗时多、空间复杂度高等，所以，在编写递归代码的时候，一定要控制好这些副作用。

    调试递归:
        1.打印日志发现，递归值。
        2.结合条件断点进行调试。
 */
public class Note {
}
